# #!/bin/bash

# # List of Pokémon
# pokemon_list=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# # Base API URL
# BASE_URL="https://pokeapi.co/api/v2/pokemon"

# # Error log
# ERROR_FILE="errors.txt"
# > "$ERROR_FILE"  # Clear old log

# # Function to fetch one Pokémon
# fetch_pokemon() {
#   name=$1
#   url="${BASE_URL}/${name}"
#   file="${name}.json"

#   echo "Fetching $name..."
#   response=$(curl -s -w "%{http_code}" -o "$file" "$url")
#   status="${response: -3}"

#   if [ "$status" -eq 200 ]; then
#     echo "Fetched $name successfully."
#   else
#     echo "Failed to fetch $name (status $status)" | tee -a "$ERROR_FILE"
#     echo "Timestamp: $(date)" >> "$ERROR_FILE"
#   fi
# }

# # Fetch all Pokémon in parallel
# for pokemon in "${pokemon_list[@]}"; do
#   fetch_pokemon "$pokemon" &
# done

# # Wait for all background jobs to complete
# wait

# echo "All fetch operations completed."


#!/bin/bash

# List of Pokémon
pokemon_list=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

BASE_URL="https://pokeapi.co/api/v2/pokemon"
ERROR_FILE="errors.txt"
> "$ERROR_FILE"

# Function to fetch a Pokémon (used with timeout logic)
fetch_with_timeout() {
  name=$1
  url="${BASE_URL}/${name}"
  file="${name}.json"

  echo "Fetching $name..."

  # Start curl in the background and capture PID
  curl -s -w "%{http_code}" -o "$file" "$url" > "${file}.status" &
  pid=$!

  # Wait for up to 5 seconds
  timeout=5
  while kill -0 "$pid" 2>/dev/null && [ "$timeout" -gt 0 ]; do
    sleep 1
    ((timeout--))
  done

  # If still running after timeout, kill it
  if kill -0 "$pid" 2>/dev/null; then
    echo "Killing $name fetch (PID $pid) due to timeout"
    kill "$pid"
    echo "Fetch for $name timed out." >> "$ERROR_FILE"
    echo "Timestamp: $(date)" >> "$ERROR_FILE"
    rm -f "$file"
  else
    wait "$pid"
    status=$(tail -c 3 "${file}.status")
    if [ "$status" -ne 200 ]; then
      echo "Failed to fetch $name (status $status)" >> "$ERROR_FILE"
      echo "Timestamp: $(date)" >> "$ERROR_FILE"
    fi
  fi

  rm -f "${file}.status"
}

# Start fetches in parallel
for name in "${pokemon_list[@]}"; do
  fetch_with_timeout "$name" &
done

# Wait for all background processes
wait

echo "All fetch operations finished."
